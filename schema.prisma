generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Organization {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  workspaces Workspace[]
  users      User[]
}

model Workspace {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String           @db.ObjectId
  locations      Location[]
  locationGroups LocationGroup[]
  deviceGroups   DeviceGroup[]
  accessControl  AccessControlEntry[]
}

model Location {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  workspace      Workspace        @relation(fields: [workspaceId], references: [id])
  workspaceId    String           @db.ObjectId
  devices        Device[]
  locationGroups LocationGroup[]  @relation(fields: [locationGroupIds], references: [id])
  locationGroupIds String[] @db.ObjectId // Array of location group IDs for faster access
  accessControl  AccessControlEntry[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  sensorSlots   SensorSlot[]    // Array of sensor slots for the location

  // notifications
  notifications  Notification[]

  @@index([workspaceId, name]) // Index for faster queries by workspace and name
  @@index([workspaceId, createdAt]) // Index for faster queries by workspace and creation date
  @@index([workspaceId, updatedAt]) // Index for faster queries by workspace and update date
  @@index([workspaceId, name, createdAt]) // Composite index for queries by workspace, name, and creation date
  @@index([workspaceId, name, updatedAt]) // Composite index for queries by workspace, name, and update date
}

model LocationGroup {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])
  workspaceId String     @db.ObjectId
  locations   Location[] @relation(fields: [locationIds], references: [id])
  locationIds String[] @db.ObjectId // Array of location IDs for faster access
  accessControl AccessControlEntry[] 
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  description String?   // Optional description for the location group
  parentGroupId String? @db.ObjectId // Optional field for hierarchical grouping

  //parentGroup LocationGroup? @relation("LocationGroupHierarchy", fields: [parentGroupId], references: [id])
  // childGroups LocationGroup[] @relation("LocationGroupHierarchy")
  @@index([workspaceId, name]) // Index for faster queries by workspace and name
  @@index([workspaceId, createdAt]) // Index for faster queries by workspace and creation date
  @@index([workspaceId, updatedAt]) // Index for faster queries by workspace and update date
  @@index([workspaceId, name, createdAt]) // Composite index for queries by workspace, name, and creation date
  @@index([workspaceId, name, updatedAt]) // Composite index for queries by workspace, name, and update date
  @@index([workspaceId, parentGroupId]) // Index for faster queries by workspace and parent group
  @@index([workspaceId, locationIds]) // Index for faster queries by workspace and location IDs
}

model DeviceType {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  devices  Device[]
}

model DeviceGroup {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])
  workspaceId String     @db.ObjectId
  devices     Device[]
}

model Device {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  location        Location       @relation(fields: [locationId], references: [id])
  locationId      String         @db.ObjectId
  deviceType      DeviceType     @relation(fields: [deviceTypeId], references: [id])
  deviceTypeId    String         @db.ObjectId
  deviceGroup     DeviceGroup?   @relation(fields: [deviceGroupId], references: [id])
  deviceGroupId   String?        @db.ObjectId
  //accessControl   AccessControlEntry[]
  sensorData      SensorData[]
  notifications   Notification[]
  sensorSlots     SensorSlot[]
  deviceAssignments DeviceAssignment[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  status          String         // e.g., "active", "inactive", "maintenance"
  lastSeen        DateTime?      // Optional field to track the last seen time of the device
}

model SensorSlot {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?
  locationId      String       @db.ObjectId
  location        Location     @relation(fields: [locationId], references: [id])

  sensorType      String       // Ex: "temperature", "humidity"
  unit            String       // Ex: °C, %, etc.
  currentDeviceId String?      @db.ObjectId
  currentDevice   Device?      @relation(fields: [currentDeviceId], references: [id])

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  sensorData      SensorSlotData[]
  deviceHistory   DeviceAssignment[]

  @@index([locationId, name])
}

model DeviceAssignment {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  slotId     String      @db.ObjectId
  slot       SensorSlot  @relation(fields: [slotId], references: [id])

  deviceId   String      @db.ObjectId
  device     Device      @relation(fields: [deviceId], references: [id])

  startAt    DateTime    @default(now())
  endAt      DateTime?

  reason     String?     // Ex: “Defeito”, “Upgrade”, “Manutenção”
}

model SensorSlotData {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  slotId     String      @db.ObjectId
  slot       SensorSlot  @relation(fields: [slotId], references: [id])

  timestamp  DateTime
  type       String      // Ex: temperature, humidity, etc.
  value      Float
  unit       String

  createdAt  DateTime    @default(now())

  @@index([slotId, type, timestamp])
}


model User {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  email          String       @unique
  name           String?
  stackUserId    String?      @unique // Optional field for Stack User ID
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.ObjectId
  roles          UserRole[]
  accessControl  AccessControlEntry[]

  // notifications
  notifications Notification[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  lastLogin     DateTime?    // Optional field to track the last login time
  isActive      Boolean      @default(true) // Indicates if the user account is active
}

model Role {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique
  description String?
  permissions Permission[] @relation(fields: [permissionsId], references: [id])
  users       UserRole[]
  permissionsId String[]   @db.ObjectId // Optional field to link to a specific permission set
}

model Permission {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  action      String    // e.g., "read", "write", "delete"
  resource    String    // e.g., "workspace", "location", "device"
  roles       Role[]    @relation(fields: [rolesId], references: [id])
  rolesId     String[]  @db.ObjectId
}

model UserRole {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String @db.ObjectId
}

model AccessControlEntry {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @db.ObjectId
  resourceId    String
  resourceType  String   // e.g., "workspace", "location", "device"
  permission    String   // e.g., "read", "write"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  description   String?  // Optional description for the access control entry
  expiresAt     DateTime? // Optional expiration date for the access control entry
  isActive      Boolean  @default(true) // Indicates if the access control entry is currently active
  workspaceId   String?  @db.ObjectId // Optional field to link to a specific workspace
  workspace      Workspace? @relation(fields: [workspaceId], references: [id])
  locationId    String?  @db.ObjectId // Optional field to link to a specific location
  location      Location? @relation(fields: [locationId], references: [id])
  deviceId      String?  @db.ObjectId // Optional field to link to a specific device
  locationGroupId String? @db.ObjectId // Optional field to link to a specific location group
  locationGroup LocationGroup? @relation(fields: [locationGroupId], references: [id])
}

model SensorData {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  deviceId    String   @db.ObjectId
  device      Device   @relation(fields: [deviceId], references: [id])
  timestamp   DateTime
  type        String   // Ex: temperature, humidity, wind_speed, pressure
  value       Float
  unit        String   // °C, %, mm, etc.
  createdAt   DateTime @default(now())

  @@index([deviceId, timestamp])
  @@index([deviceId, type, timestamp])
}

model Notification {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  deviceId     String   @db.ObjectId
  device       Device   @relation(fields: [deviceId], references: [id])

  type         NotificationType  // Enum: "ALERT", "WARNING", "INFO"
  severity     NotificationSeverity // Enum: "CRITICAL", "HIGH", "MEDIUM", "LOW"

  title        String
  message      String
  code         String? // código da notificação, ex: SENSOR_FAIL, LOW_BATTERY
  read         Boolean  @default(false)

  timestamp    DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Caso deseje associar a User (opcional)
  userId       String? @db.ObjectId
  user         User? @relation(fields: [userId], references: [id])

  // Caso deseje associar a Location ou Workspace (opcional)
  locationId   String? @db.ObjectId
  location     Location? @relation(fields: [locationId], references: [id])
}

enum NotificationType {
  ALERT
  WARNING
  INFO
}

enum NotificationSeverity {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}